#!/bin/bash -e

errorout() { echo "$*" >&2; exit 1; }

usage() { echo 'scripts/install [ --clean ] [ --fast ]'; exit 1; }

test_pkg() {
      if $test; then
        echo "testing $1..."
        $CABAL configure --enable-tests
        $CABAL build
        $CABAL test
      fi

      $CABAL check
}

install_pkgs() { # {{{
  local pkg

  for pkg; do
    [[ -d "./$pkg" ]] || continue

    echo "Installing $pkg..."

    (
      cd "./$pkg"

      $clean && $CABAL clean

      if ! $CABAL configure --ghc-options='-Wall -Werror'; then
        $CABAL install --only-dependencies
        $CABAL configure --ghc-options='-Wall -Werror'
      fi

      $CABAL build

      test_pkg pkg

      $fast || $CABAL haddock --executables

      ./Setup.lhs install
    )
  done
}
# }}}

hamlet_pkgs=(     shakespeare
                  shakespeare-css
                  shakespeare-js
                  shakespeare-text
                  hamlet                )
persistent_pkgs=( pool
                  persistent
                  persistent-template
                  persistent-sqlite
                  persistent-postgresql
                  persistent-mongoDB    )
wai_pkgs=(        wai
                  wai-test
                  wai-extra
                  warp
                  wai-app-static
                  wai-handler-fastcgi
                  wai-handler-launch
                  wai-handler-scgi
                  wai-websockets
                  wai-eventmachine
                  warp-static           )
yesod_pkgs=(      yesod-core
                  yesod-json
                  yesod-static
                  yesod-persistent
                  yesod-newsfeed
                  yesod-form
                  yesod-auth
                  yesod-sitemap
                  yesod-default
                  yesod                 )

# allow an env var to override
CABAL=${CABAL:-cabal}

# determine what repo you're in dynamically
if ! read -r repo < <(git remote -v |grep '^origin.*(fetch)' | sed 's/^.*\///; s/\.git.*$//');then
  errorout 'unable to determine repository name.'
fi

[[ -z "$repo" ]] && errorout 'unable to determine repository name.'

echo "Installing for repo $repo..."

# set the pkgs array to those appropriate for that repo
varname="${repo}_pkgs[@]"
declare -a pkgs=( ${!varname} )
[[ "${#pkgs[@]}" -eq 0 ]] && errorout "no packages to install for repository $repo."

# set defaults
test=true
clean=false
fast=false

# commandline options
while [[ -n "$1" ]]; do
  case "$1" in
    -c|--clean) clean=true ;;
    -f|--fast)  fast=true  ;;
    -h|--help)  usage      ;;
    *)          break      ;;
  esac
  shift
done

# allow individual packages to be passed on the commandline
if [[ $# -ne 0 ]]; then
  $CABAL install HUnit QuickCheck 'hspec >= 0.8 && < 0.10'
  install_pkgs "$@"
  exit $?
fi

# persistent is handled specially
if [[ "$repo" == 'persistent' ]]; then
  # testing dependencies
  $CABAL install HUnit QuickCheck 'file-location' 'hspec >= 0.8 && < 0.10'

  test=false  # install all persistent packages without tests
  install_pkgs "${pkgs[@]}"

  test=true # persistent-test is the only persistent package with tests
  cd "./persistent-test"
  test_pkg "persistent-test"

else
  $CABAL install HUnit QuickCheck 'hspec >= 0.8 && < 1.0' # shelltestrunner

  install_pkgs "${pkgs[@]}"
fi
